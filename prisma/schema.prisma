generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------- Enums ---------------------
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// --------------------- Models ---------------------

model Product {
  id           Int             @id @default(autoincrement())
  name         String
  description  String?
  actualPrice  Float
  sellingPrice Float
  category     String
  boxpack      Boolean
  categories   String[]        @default([])
  stock        Int             @default(0)
  images       ProductImage[]
  carts        Cart[]  
  reviews      Review[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  orderItems   OrderItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  url       String
  alt       String?
  createdAt DateTime @default(now())
}

model Accessory {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  actualPrice    Float
  sellingPrice   Float
  brand          String
  compatibility  String?
  boxpack        Boolean
  stock          Int              @default(0)
  images         AccessoryImage[]
  carts          Cart[]
  orderItems     OrderItem[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model AccessoryImage {
  id           Int         @id @default(autoincrement())
  accessory    Accessory   @relation(fields: [accessoryId], references: [id])
  accessoryId  Int
  url          String
  alt          String?
  createdAt    DateTime    @default(now())
}

model Part {
  id        Int           @id @default(autoincrement())
  name      String
  type      String
  category  String
  price     Float
  stock     Int           @default(0)
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())

  images     PartImage[]
  carts      Cart[]
  orderItems OrderItem[]
}



model PartImage {
  id       Int     @id @default(autoincrement())
  url      String
  alt      String?
  part     Part    @relation(fields: [partId], references: [id])
  partId   Int
  createdAt DateTime @default(now())
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("USER")
  carts     Cart[]
  orders    Order[]
  builds    CustomBuild[]
  parts     Part[]   // âœ… Back-reference to Part model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id           Int         @id @default(autoincrement())
  userId       Int
  productId    Int?
  accessoryId  Int?
  partId       Int?
  quantity     Int         @default(1)
  priceAtAdd   Float
  createdAt    DateTime    @default(now())

  user         User        @relation(fields: [userId], references: [id])
  product      Product?    @relation(fields: [productId], references: [id])
  accessory    Accessory?  @relation(fields: [accessoryId], references: [id])
  part         Part?       @relation(fields: [partId], references: [id])
}

model Order {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus   @default(PENDING)
  createdAt   DateTime      @default(now())
}

model OrderItem {
  id          String      @id @default(uuid())
  order       Order       @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product?    @relation(fields: [productId], references: [id])
  productId   Int?
  accessory   Accessory?  @relation(fields: [accessoryId], references: [id])
  accessoryId Int?
  part        Part?       @relation(fields: [partId], references: [id])
  partId      Int?
  quantity    Int
  price       Float
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int
  comment   String?
  reviewer  String?
  createdAt DateTime @default(now())
}

model CustomBuild {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  buildName  String
  components Json     // store selectedComponents from frontend
  createdAt  DateTime @default(now())
}
